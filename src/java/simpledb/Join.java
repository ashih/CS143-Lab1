package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */

    JoinPredicate m_p;
    DbIterator m_child1, m_child2;
    Tuple m_next1;
    //Boolean m_getNext1;
    //Boolean m_stop1;

    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        m_p = p;
        m_child1 = child1;
        m_child2 = child2;
        m_next1 = null;
        //m_getNext1 = false;
        //m_stop1 = false;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return m_p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return m_child1.getTupleDesc().getFieldName(m_p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return m_child2.getTupleDesc().getFieldName(m_p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return simpledb.TupleDesc.merge(m_child1.getTupleDesc(), m_child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        m_child1.open();
        m_child2.open();
        super.open();
    }

    public void close() {
        // some code goes here
        m_child1.close();
        m_child2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        m_child1.rewind();
        m_child2.rewind();
        m_next1 = null;
        //m_getNext1 = false;
        //m_stop1 = false;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        //while(m_child1.hasNext()) {

        /*while(!m_stop1) {
            Tuple next1;
            if (m_next1 == null) {
                next1 = m_child1.next();
                m_next1 = next1;
            }
            else {
                if (m_getNext1) {
                    if (m_child1.hasNext()) {
                        next1 = m_child1.next();
                    }
                    else {
                        m_stop1 = true;
                        break;
                    }
                    m_next1 = next1;
                    m_getNext1 = false;
                }
                else    
                    next1 = m_next1;
            }
            while (m_child2.hasNext()) {
                Tuple next2 = m_child2.next();
                if (m_p.filter(next1, next2)) {
                    Tuple join = new Tuple(getTupleDesc());
                    int size1 = m_child1.getTupleDesc().numFields();
                    int size2 = m_child2.getTupleDesc().numFields();
                    for (int i = 0; i < size1; i++) {
                        join.setField(i,next1.getField(i));
                    }
                    for (int j = 0; j < size2; j++) {
                        join.setField(size1 + j,next2.getField(j));       
                    }
                    //for (int k = 0; k < size1 + size2; k++)
                    //    System.out.print(join.getField(k) + " ");   
                    //System.out.print("\n");
                    return join;
                }
            }            
            m_child2.rewind();
            m_getNext1 = true;
        }

        return null;*/

        Tuple next1 = m_next1;
        if (next1 == null && m_child1.hasNext()) {

            next1 = m_child1.next();
            m_child2.rewind();

        }

        while ((m_child1.hasNext() || m_child2.hasNext()) && next1 != null) {
            while(m_child2.hasNext()) {
                Tuple next2 = m_child2.next();
                if (m_p.filter(next1,next2)) {
                    m_next1 = next1;
                    Tuple join = new Tuple(getTupleDesc());
                    int size1 = m_child1.getTupleDesc().numFields();
                    int size2 = m_child2.getTupleDesc().numFields();
                    for (int i = 0; i < size1; i++) {
                        join.setField(i,next1.getField(i));
                    }
                    for (int j = 0; j < size2; j++) {
                        join.setField(size1 + j,next2.getField(j));       
                    }
                    return join;
                }
            }

            if (m_child1.hasNext()) {
                m_child2.rewind();
                next1 = m_child1.next();
            }


        }
        m_next1 = null;
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        DbIterator[] children = new DbIterator[2];
        children[0] = m_child1;
        children[1] = m_child2;
        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        m_child1 = children[0];
        m_child2 = children[1];
    }

}
